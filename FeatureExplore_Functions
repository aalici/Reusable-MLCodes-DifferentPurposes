def f_get_PCA_and_Visualize(v_df, v_numeric_columns_list, v_target_column_name):
    '''
    dfx = f_get_PCA_and_Visualize(sample_df, ['age','income','somethingelse'] ,  v_target_column_name = 'is_bought')
    '''
    target_column = v_target_column_name
    numeric_columns = v_numeric_columns_list
    df = v_df
    
    #np.shape(x)
    #np.shape(y)
    #np.shape(principalComponents)
    
    ###STANDARDIZE
    from sklearn.preprocessing import StandardScaler
    features = numeric_columns
    # Separating out the features
    x = df.loc[:, features].values
    # Separating out the target
    y = df.loc[:,[target_column]].values
    # Standardizing the features
    x = StandardScaler().fit_transform(x)
    
    ####PCA
    from sklearn.decomposition import PCA
    pca = PCA(n_components=2)
    principalComponents = pca.fit_transform(x)
    principalDf = pd.DataFrame(data = principalComponents
                 , columns = ['principal component 1', 'principal component 2'], index = df[target_column].index)
    finalDf = pd.concat([principalDf, df[target_column]], axis = 1)
    
    ###VISUALIZE
    fig = plt.figure(figsize = (15,15))
    ax = fig.add_subplot(1,1,1) 
    ax.set_xlabel('Principal Component 1', fontsize = 15)
    ax.set_ylabel('Principal Component 2', fontsize = 15)
    ax.set_title('2 component PCA', fontsize = 20)
    targets = df[target_column].unique()
    colors = ['r', 'g']
    for target, color in zip(targets,colors):
        indicesToKeep = finalDf[target_column] == target
        ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']
                   , finalDf.loc[indicesToKeep, 'principal component 2']
                   , c = color
                   , s = 30)
    ax.legend(targets)
    ax.grid()
   
    print(pca.explained_variance_ratio_)
    return finalDf
